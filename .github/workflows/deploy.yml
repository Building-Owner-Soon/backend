name: Continuous Deployment

on:
  workflow_dispatch:
    inputs:
      artifact_version:
        description: 'Artifact version to deploy (e.g., develop-a1b2c3d4, v1.0.0)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (validate deployment without executing)'
        required: false
        default: false
        type: boolean
      # TODO: Ïó¨Îü¨ ÌôòÍ≤Ω Íµ¨Ï∂ïÎêòÎ©¥ ÏÇ¨Ïö©
      # environment:
      #   description: 'Deployment environment'
      #   required: true
      #   default: 'staging'
      #   type: choice
      #   options:
      #     - staging
      #     - production
  repository_dispatch:
    types: [deploy-ready]

jobs:
  deploy:
    runs-on: ubuntu-latest
    # TODO: Add environment protection when multi-environment setup is needed
    # environment: ${{ inputs.environment || github.event.client_payload.environment || 'production' }}

    steps:
      - name: Set Variables
        id: vars
        run: |
          # Handle both workflow_dispatch and repository_dispatch events
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            echo "ARTIFACT_VERSION=${{ github.event.client_payload.artifact_version }}" >> $GITHUB_OUTPUT
            echo "DRY_RUN=false" >> $GITHUB_OUTPUT
          else
            echo "ARTIFACT_VERSION=${{ inputs.artifact_version }}" >> $GITHUB_OUTPUT
            echo "DRY_RUN=${{ inputs.dry_run }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Validate Artifact Exists
        run: |
          ARTIFACT_PATH="s3://bos-build-artifacts/bos-backend-${{ steps.vars.outputs.ARTIFACT_VERSION }}.jar"
          echo "Checking artifact: $ARTIFACT_PATH"

          if aws s3 ls "$ARTIFACT_PATH" >/dev/null 2>&1; then
            echo "‚úÖ Artifact found: $ARTIFACT_PATH"
            echo "ARTIFACT_EXISTS=true" >> $GITHUB_ENV
          else
            echo "‚ùå Artifact not found: $ARTIFACT_PATH"
            echo "ARTIFACT_EXISTS=false" >> $GITHUB_ENV
            exit 1
          fi

      - name: Download Artifact from S3
        if: env.ARTIFACT_EXISTS == 'true'
        run: |
          mkdir -p artifacts
          aws s3 cp s3://bos-build-artifacts/bos-backend-${{ steps.vars.outputs.ARTIFACT_VERSION }}.jar \
          artifacts/bos-backend-${{ steps.vars.outputs.ARTIFACT_VERSION }}.jar

          echo "Downloaded artifact size:"
          ls -lh artifacts/


      - name: Dry Run Validation
        if: steps.vars.outputs.DRY_RUN == 'true'
        run: |
          echo "üîç DRY RUN MODE - Validation Only"
          echo "Artifact: bos-backend-${{ steps.vars.outputs.ARTIFACT_VERSION }}.jar"
          echo "Target Host: ${{ secrets.EC2_HOST }}"
          echo "‚úÖ All validations passed - deployment would succeed"

      - name: Deploy to EC2
        if: steps.vars.outputs.DRY_RUN == 'false'
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          ARTIFACT_VERSION: ${{ steps.vars.outputs.ARTIFACT_VERSION }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          echo "üöÄ Starting deployment..."

          # Upload new JAR file
          scp -i private_key.pem -o StrictHostKeyChecking=no \
            artifacts/bos-backend-$ARTIFACT_VERSION.jar \
            $USER@$HOST:/home/$USER/bos-backend-$ARTIFACT_VERSION.jar

          # Deploy with zero-downtime strategy
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << EOF
            set -e

            # Create backup of current version
            if [ -f bos-backend-current.jar ]; then
              cp bos-backend-current.jar bos-backend-backup.jar
              echo "‚úÖ Created backup of current version"
            fi

            # Create symlink to new version
            ln -sf bos-backend-$ARTIFACT_VERSION.jar bos-backend-current.jar
            echo "‚úÖ Updated symlink to new version"

            # Graceful shutdown of old process
            OLD_PID=\$(pgrep -f 'java.*bos-backend' || echo "")
            if [ ! -z "\$OLD_PID" ]; then
              echo "‚èπÔ∏è  Gracefully stopping old process (PID: \$OLD_PID)"
              kill -TERM \$OLD_PID
              sleep 10

              # Force kill if still running
              if kill -0 \$OLD_PID 2>/dev/null; then
                echo "üî™ Force killing old process"
                kill -KILL \$OLD_PID
              fi
            fi

            # Start new process
            echo "üöÄ Starting new application..."
            nohup java -jar \
              -Xms512m -Xmx1024m \
              /home/$USER/bos-backend-current.jar \
              > logs/bos-backend-$ARTIFACT_VERSION.log 2>&1 &

            # TODO: Add profile-specific startup when multi-environment setup is needed
            # -Dspring.profiles.active=$ENVIRONMENT \

            NEW_PID=\$!
            echo "‚úÖ Started new process (PID: \$NEW_PID)"

            # Wait for application to start
            echo "‚è≥ Waiting for application to start..."
            sleep 30

            # Health check
            for i in {1..12}; do
              if curl -f http://localhost:8000/actuator/health >/dev/null 2>&1; then
                echo "‚úÖ Application health check passed"
                exit 0
              fi
              echo "‚è≥ Health check attempt \$i/12 failed, retrying in 10s..."
              sleep 10
            done

            echo "‚ùå Health check failed after 2 minutes"
            exit 1
          EOF

          echo "‚úÖ Deployment completed successfully"

      - name: External Health Check
        id: external_health_check
        if: steps.vars.outputs.DRY_RUN == 'false'
        env:
          HEALTH_CHECK_URL: ${{ secrets.HEALTH_CHECK_URL || 'http://54.180.123.147:8000/actuator/health' }}
        run: |
          echo "üîç Performing external health check..."
          echo "Health check URL: $HEALTH_CHECK_URL"

          # Wait a bit more for external access to be ready
          echo "‚è≥ Waiting for external connectivity..."
          sleep 15

          success=false
          for i in {1..6}; do
            echo "üîç External health check attempt $i/6..."
            if curl -f -s --max-time 10 "$HEALTH_CHECK_URL" > /dev/null; then
              echo "‚úÖ External health check passed!"
              success=true
              break
            else
              echo "‚è≥ External health check failed, retrying in 30 seconds..."
              sleep 30
            fi
          done

          if [ "$success" = "true" ]; then
            echo "health_status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Application is healthy and accessible externally"
          else
            echo "health_status=failed" >> $GITHUB_OUTPUT
            echo "‚ùå External health check failed - application may not be accessible"
            # Don't fail the deployment, just warn
            echo "‚ö†Ô∏è Deployment completed but health check failed"
          fi

      - name: Discord Deployment Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            COLOR=3066993
            if [ "${{ steps.vars.outputs.DRY_RUN }}" == "true" ]; then
              TITLE="üîç Deployment Dry Run Completed"
              STATUS_TEXT="Validation successful - ready for actual deployment"
            else
              TITLE="‚úÖ Deployment Completed"
              STATUS_TEXT="Successfully deployed"
            fi
          else
            COLOR=15158332
            TITLE="‚ùå Deployment Failed"
            STATUS_TEXT="Deployment failed"
          fi

          MIGRATION_STATUS="üîÑ Migrations run on startup"

          HEALTH_STATUS="‚úÖ Healthy"
          if [ "${{ steps.external_health_check.outputs.health_status }}" == "failed" ]; then
            HEALTH_STATUS="‚ö†Ô∏è Health check failed"
          elif [ "${{ steps.vars.outputs.DRY_RUN }}" == "true" ]; then
            HEALTH_STATUS="‚ûñ Skipped (dry run)"
          fi

          curl -H "Content-Type: application/json" \
          -d "{
            \"embeds\": [{
              \"title\": \"$TITLE\",
              \"color\": $COLOR,
              \"fields\": [
                {\"name\": \"Version\", \"value\": \"${{ steps.vars.outputs.ARTIFACT_VERSION }}\", \"inline\": true},
                {\"name\": \"Migration\", \"value\": \"$MIGRATION_STATUS\", \"inline\": true},
                {\"name\": \"Health Check\", \"value\": \"$HEALTH_STATUS\", \"inline\": true},
                {\"name\": \"Status\", \"value\": \"$STATUS_TEXT\", \"inline\": false},
                {\"name\": \"Deployed by\", \"value\": \"${{ github.actor }}\", \"inline\": true}
              ],
              \"footer\": {\"text\": \"Deployment completed\"},
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
            }]
          }" \
          $DISCORD_WEBHOOK

      - name: Cleanup
        if: always()
        run: |
          rm -f private_key.pem
          rm -rf artifacts/
