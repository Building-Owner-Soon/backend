name: Continuous Integration

on:
  push:
    branches:
      - develop
      - master
  release:
    types:
      - created

jobs:
  build-and-upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "corretto"
          java-version: "21"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Get version string
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${GITHUB_REF#refs/tags/}"
          else
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
            SAFE_BRANCH_NAME=$(echo "$BRANCH_NAME" | sed 's/\//-/g')
            SHORT_SHA=$(git rev-parse --short=8 HEAD)
            VERSION="${SAFE_BRANCH_NAME}-${SHORT_SHA}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Run Tests
        run: ./gradlew test

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Rename JAR
        run: |
          JAR_FILE=$(find build/libs -type f -name "*.jar" ! -name "*-plain.jar" | head -n 1)
          mv "$JAR_FILE" "build/libs/bos-backend-${{ steps.version.outputs.VERSION }}.jar"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Upload to S3
        run: |
          aws s3 cp build/libs/bos-backend-${{ steps.version.outputs.VERSION }}.jar \
          s3://bos-artifacts/backend/bos-backend-${{ steps.version.outputs.VERSION }}.jar

      - name: Upload GitHub Artifact (Backup)
        uses: actions/upload-artifact@v4
        with:
          name: bos-backend-${{ steps.version.outputs.VERSION }}
          path: build/libs/bos-backend-${{ steps.version.outputs.VERSION }}.jar
          retention-days: 30

      - name: Discord Notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          ARTIFACT_URL="s3://bos-artifacts/backend/bos-backend-${{ steps.version.outputs.VERSION }}.jar"

          curl -H "Content-Type: application/json" \
          -d "{
            \"embeds\": [{
              \"title\": \"🚀 CI Build Completed\",
              \"color\": 3066993,
              \"fields\": [
                {\"name\": \"Branch\", \"value\": \"${{ github.ref_name }}\", \"inline\": true},
                {\"name\": \"Version\", \"value\": \"${{ steps.version.outputs.VERSION }}\", \"inline\": true},
                {\"name\": \"Commit\", \"value\": \"[\`${{ github.sha }}\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})\", \"inline\": true},
                {\"name\": \"Artifact\", \"value\": \"\`${ARTIFACT_URL}\`\", \"inline\": false},
                {\"name\": \"Triggered by\", \"value\": \"${{ github.event_name }}\", \"inline\": true}
              ],
              \"footer\": {\"text\": \"Ready for deployment\"},
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
            }],
            \"components\": [{
              \"type\": 1,
              \"components\": [
                {
                  \"type\": 2,
                  \"style\": 3,
                  \"label\": \"🚀 Deploy to Staging\",
                  \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/workflows/deploy.yml\"
                },
                {
                  \"type\": 2,
                  \"style\": 1,
                  \"label\": \"🔥 Deploy to Production\",
                  \"url\": \"${{ github.server_url }}/${{ github.repository }}/actions/workflows/deploy.yml\"
                }
              ]
            }]
          }" \
          $DISCORD_WEBHOOK

      - name: Health Check
        id: health_check
        run: |
          echo "Waiting for application to start..."
          sleep 30

          success=false
          for i in {1..3}; do
            echo "Health check attempt $i/3..."
            if curl -f -s http://54.180.123.147:8000/actuator/health > /dev/null; then
              echo "Health check passed!"
              success=true
              break
            else
              echo "Health check failed, retrying in 30 seconds..."
              sleep 30
            fi
          done

          if [ "$success" = "true" ]; then
            echo "health_status=success" >> $GITHUB_OUTPUT
          else
            echo "health_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Discord Success Notification
        if: steps.health_check.outputs.health_status == 'success'
        run: |
          curl -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "🚀 배포 성공",
                "description": "BOS Backend가 성공적으로 배포되었습니다!",
                "color": 65280,
                "fields": [
                  {
                    "name": "버전",
                    "value": "${{ steps.version.outputs.VERSION }}",
                    "inline": true
                  },
                  {
                    "name": "브랜치",
                    "value": "${{ github.ref_name }}",
                    "inline": true
                  },
                  {
                    "name": "서버 상태",
                    "value": "✅ 정상",
                    "inline": true
                  }
                ],
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
              }]
            }' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}

      - name: Discord Failure Notification
        if: failure()
        run: |
          curl -H "Content-Type: application/json" \
            -d '{
              "embeds": [{
                "title": "❌ 배포 실패",
                "description": "BOS Backend 배포 중 오류가 발생했습니다.",
                "color": 16711680,
                "fields": [
                  {
                    "name": "버전",
                    "value": "${{ steps.version.outputs.VERSION }}",
                    "inline": true
                  },
                  {
                    "name": "브랜치",
                    "value": "${{ github.ref_name }}",
                    "inline": true
                  },
                  {
                    "name": "실패 단계",
                    "value": "${{ job.status }}",
                    "inline": true
                  }
                ],
                "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"
              }]
            }' \
            ${{ secrets.DISCORD_WEBHOOK_URL }}
