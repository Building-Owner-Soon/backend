name: Pull Request Validation

on:
  pull_request:
    branches:
      - ci-test

jobs:
  validate:
    runs-on: ubuntu-latest

    services:
      mariadb:
        image: mariadb:10.11
        env:
          MYSQL_ROOT_PASSWORD: testpassword
          MYSQL_DATABASE: bos_test
          MYSQL_USER: testuser
          MYSQL_PASSWORD: testpassword
        ports:
          - 3306:3306
        options: >-
          --health-cmd="healthcheck.sh --connect --innodb_initialized"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: "corretto"
          java-version: "21"

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Wait for MariaDB
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P3306 -u root -ptestpassword --silent; do
            echo "Waiting for MariaDB..."
            sleep 2
          done
          echo "MariaDB is ready!"

      - name: Test Application Startup with Migration
        env:
          db-host: r2dbc:mariadb://127.0.0.1:3306/bos_test
          jdbc-url: jdbc:mariadb://127.0.0.1:3306/bos_test
          db-user: root
          db-password: testpassword
          jwt-secret: testsecret123testsecret123testsecret123testsecret123
          redis-host: localhost
          redis-port: 6379
          mail-username: test@test.com
          mail-password: testpassword
          s3-bucket-name: test-bucket
          s3-base-url: https://test.s3.amazonaws.com
        run: |
          echo "🚀 Starting application (migrations will run automatically)..."
          timeout 60 ./gradlew bootRun --no-daemon &
          APP_PID=$!
          
          echo "⏳ Waiting for application to start and run migrations..."
          sleep 30
          
          # Check if application is running and healthy
          for i in {1..10}; do
            if curl -f http://localhost:8000/actuator/health >/dev/null 2>&1; then
              echo "✅ Application started successfully with migrations"
              kill $APP_PID 2>/dev/null || true
              exit 0
            fi
            echo "⏳ Health check attempt $i/10, retrying in 5s..."
            sleep 5
          done
          
          echo "❌ Application startup failed or took too long"
          kill $APP_PID 2>/dev/null || true
          exit 1

#      - name: Run Unit Tests
#        run: ./gradlew test
#
#      - name: Run Integration Tests with TestContainers
#        run: ./gradlew test --tests "*IntegrationTest"

      - name: Generate Test Report
        uses: dorny/test-reporter@v1
        if: (success() || failure()) && hashFiles('build/test-results/test/**/*.xml') != ''
        with:
          name: Test Results
          path: build/test-results/test/**/*.xml
          reporter: java-junit
          fail-on-error: true


