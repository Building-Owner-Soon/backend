name: üöÄ One-Click Deploy

on:
  workflow_dispatch:
    inputs:
      branch_filter:
        description: 'Branch to filter artifacts (default: develop)'
        required: false
        default: 'develop'
        type: string

jobs:
  auto-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Auto-detect Latest Artifact
        id: artifact
        run: |
          BRANCH_FILTER="${{ inputs.branch_filter || 'develop' }}"
          echo "üîç Looking for latest artifact from branch: $BRANCH_FILTER"

          # Get latest artifact from S3 matching the branch pattern
          LATEST_ARTIFACT=$(aws s3 ls s3://bos-build-artifacts/ --recursive | \
            grep "bos-backend-${BRANCH_FILTER}-" | \
            sort -k1,2 | \
            tail -n 1 | \
            awk '{print $4}' | \
            sed 's|backend/bos-backend-||' | \
            sed 's|\.jar$||')

          if [ -z "$LATEST_ARTIFACT" ]; then
            echo "‚ùå No artifacts found for branch: $BRANCH_FILTER"
            echo "Available artifacts:"
            aws s3 ls s3://bos-build-artifacts/ | head -10
            exit 1
          fi

          echo "‚úÖ Found latest artifact: $LATEST_ARTIFACT"
          echo "ARTIFACT_VERSION=$LATEST_ARTIFACT" >> $GITHUB_OUTPUT

          # Verify artifact exists
          if aws s3 ls "s3://bos-build-artifacts/bos-backend-${LATEST_ARTIFACT}.jar" >/dev/null 2>&1; then
            echo "‚úÖ Artifact verified in S3"
          else
            echo "‚ùå Artifact not found in S3"
            exit 1
          fi

      - name: Download Artifact from S3
        run: |
          mkdir -p artifacts
          aws s3 cp s3://bos-build-artifacts/bos-backend-${{ steps.artifact.outputs.ARTIFACT_VERSION }}.jar \
          artifacts/bos-backend-${{ steps.artifact.outputs.ARTIFACT_VERSION }}.jar

          echo "Downloaded artifact size:"
          ls -lh artifacts/

      - name: Display Deployment Plan
        run: |
          echo "## üöÄ Deployment Plan"
          echo "- **Artifact Version**: ${{ steps.artifact.outputs.ARTIFACT_VERSION }}"
          echo "- **Branch Filter**: ${{ inputs.branch_filter || 'develop' }}"
          echo ""
          echo "Proceeding with automatic deployment in 5 seconds..."
          sleep 5

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
          ARTIFACT_VERSION: ${{ steps.artifact.outputs.ARTIFACT_VERSION }}
        run: |
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          echo "üöÄ Starting deployment..."

          # Upload new JAR file
          scp -i private_key.pem -o StrictHostKeyChecking=no \
            artifacts/bos-backend-$ARTIFACT_VERSION.jar \
            $USER@$HOST:/home/$USER/bos-backend.jar

          # Simple deployment strategy
          ssh -i private_key.pem -o StrictHostKeyChecking=no $USER@$HOST << EOF
            set -e

            # Kill existing process
            echo "‚èπÔ∏è  Stopping existing application..."
            pkill -f 'java.*bos-backend' || echo "No existing process found"
            sleep 5

            # Start new process
            echo "üöÄ Starting new application..."
            nohup java -jar \
              -Xms512m -Xmx1024m \
              /home/$USER/bos-backend.jar \
              > logs/bos-backend-$ARTIFACT_VERSION.log 2>&1 &

            NEW_PID=\$!
            echo "‚úÖ Started new process (PID: \$NEW_PID)"

            # Wait for application to start
            echo "‚è≥ Waiting for application to start..."
            sleep 30

            # Health check
            for i in {1..12}; do
              if curl -f http://localhost:8000/actuator/health >/dev/null 2>&1; then
                echo "‚úÖ Application health check passed"
                exit 0
              fi
              echo "‚è≥ Health check attempt \$i/12 failed, retrying in 10s..."
              sleep 10
            done

            echo "‚ùå Health check failed after 2 minutes"
            exit 1
          EOF

          echo "‚úÖ Deployment completed successfully"

      - name: External Health Check
        id: external_health_check
        env:
          HEALTH_CHECK_URL: ${{ secrets.HEALTH_CHECK_URL || 'http://54.180.123.147:8000/actuator/health' }}
        run: |
          echo "üîç Performing external health check..."
          echo "Health check URL: $HEALTH_CHECK_URL"

          # Wait a bit more for external access to be ready
          echo "‚è≥ Waiting for external connectivity..."
          sleep 15

          success=false
          for i in {1..6}; do
            echo "üîç External health check attempt $i/6..."
            if curl -f -s --max-time 10 "$HEALTH_CHECK_URL" > /dev/null; then
              echo "‚úÖ External health check passed!"
              success=true
              break
            else
              echo "‚è≥ External health check failed, retrying in 30 seconds..."
              sleep 30
            fi
          done

          if [ "$success" = "true" ]; then
            echo "health_status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Application is healthy and accessible externally"
          else
            echo "health_status=failed" >> $GITHUB_OUTPUT
            echo "‚ùå External health check failed - application may not be accessible"
            # Don't fail the deployment, just warn
            echo "‚ö†Ô∏è Deployment completed but health check failed"
          fi

      - name: Discord Deployment Notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            COLOR=3066993
            TITLE="‚úÖ One-Click Deployment Completed"
            STATUS_TEXT="Successfully deployed latest build"
          else
            COLOR=15158332
            TITLE="‚ùå One-Click Deployment Failed"
            STATUS_TEXT="Deployment failed"
          fi

          MIGRATION_STATUS="üîÑ Migrations run on startup"

          HEALTH_STATUS="‚úÖ Healthy"
          if [ "${{ steps.external_health_check.outputs.health_status }}" == "failed" ]; then
            HEALTH_STATUS="‚ö†Ô∏è Health check failed"
          fi

          curl -H "Content-Type: application/json" \
          -d "{
            \"embeds\": [{
              \"title\": \"$TITLE\",
              \"color\": $COLOR,
              \"fields\": [
                {\"name\": \"Version\", \"value\": \"${{ steps.artifact.outputs.ARTIFACT_VERSION }}\", \"inline\": true},
                {\"name\": \"Branch\", \"value\": \"${{ inputs.branch_filter || 'develop' }}\", \"inline\": true},
                {\"name\": \"Migration\", \"value\": \"$MIGRATION_STATUS\", \"inline\": true},
                {\"name\": \"Health Check\", \"value\": \"$HEALTH_STATUS\", \"inline\": true},
                {\"name\": \"Status\", \"value\": \"$STATUS_TEXT\", \"inline\": false},
                {\"name\": \"Deployed by\", \"value\": \"${{ github.actor }}\", \"inline\": true}
              ],
              \"footer\": {\"text\": \"One-click deployment completed\"},
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
            }]
          }" \
          $DISCORD_WEBHOOK

      - name: Cleanup
        if: always()
        run: |
          rm -f private_key.pem
          rm -rf artifacts/
