openapi: 3.1.0
info:
  title: BOS API documentation
  description: |
    내꿈은건물주  API 문서

  version: 0.0.1-SNAPSHOT
  contact: {}
tags:
  - name: auth
  - name: user
  - name: profile
  - name: notification
paths:
  /auth/sign-in:
    post:
      operationId: signIn
      summary: 회원 로그인
      tags:
        - auth
      description: |-
        # 로그인
      requestBody:
        $ref: "#/components/requestBodies/SignInRequestSpec"
      responses:
        "200":
          $ref: "#/components/responses/SignInSuccessResponseSpec"
        "400":
          description: |-
            (WIP) 로그인 요청 실패

            에러 응답 정의하며 구체화 예정

            에러 케이스 (확정 X)
            - 입력값 validation (Violations) - 로직 타지 않음 (입력값만 검증)
            - oauth 로그인의 경우 로그인 실패 케이스 (UnSignedUserError) -> 회원가입으로 리디렉션 (로그인시 전달한 인증정보(providerId 등 반환)
            - 로그인 로직중 발생한 에러 (에러명 미정의)

          content:
            application/json:
              schema:
                properties:
                  message:
                    type: object
        "500":
          description: 서버 오류
          content:
            application/json:
              schema:
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
  /auth/sign-up:
    post:
      operationId: signUp
      summary: 회원 가입
      tags:
        - auth
      description: |-
        # 회원가입
      requestBody:
        $ref: "#/components/requestBodies/SignUpRequestSpec"
      responses:
        "201":
          $ref: "#/components/responses/SignUpCreatedResponseSpec"
        "400":
          description: |-
            (WIP) 로그인 요청 실패

            에러 응답 정의하며 구체화 예정

            에러 케이스 (확정 X)
            - 입력값 validation (Violations) - 로직 타지 않음 (입력값만 검증)
            - 회원가입 로직중 발생한 에러 (에러명 미정의)

          content:
            application/json:
              schema:
                properties:
                  message:
                    type: object
        "500":
          $ref: "#/components/responses/InternalServerErrorResponseSpec"
  /auth/check-email:
    get:
      tags:
        - auth
      operationId: checkEmail
      summary: 이메일 가입 여부 확인
      description: 입력한 이메일이 이미 가입된 사용자 계정인지 확인합니다.
      parameters:
        - name: email
          in: query
          description: 확인할 이메일 주소
          required: true
          schema:
            type: string
            format: email
      responses:
        "200":
          description: |-
            이메일 가입 여부 반환

            해당 이메일로 가입이 되어있는지, 가입되어 있다면 어떤 로그인타입(이메일 인증, sns 인증)인지 반환합니다.

            이메일이 존재하는 경우, `exists` 필드가 true로 설정되고, `provider` 필드에는 해당 이메일의 로그인 타입이 포함됩니다.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  isExist:
                    type: boolean
                    description: 이메일이 이미 가입된 경우 true, 그렇지 않은 경우 false
                  provider:
                    $ref: "#/components/schemas/Provider"
                example:
                  email: abc@abc.com
                  exists: true
                  provider: bos
        "400":
          description: 잘못된 이메일 형식 또는 누락된 파라미터
        "404":
          description: |-
            해당 이메일로 가입되지 않은 유저가 있는 경우
  /auth/email-verification:
    post:
      tags:
        - auth
      operationId: requestEmailVerification
      summary: "이메일 인증 요청"
      description: |-
        이메일 인증 요청을 보내고, 인증 코드가 포함된 이메일을 발송합니다.

        이메일 인증은 회원가입시 이메일 인증을 위해 사용됩니다.

        ## Request Body
        - email: 인증을 요청할 이메일 주소
        - type: 인증 타입 (signup, password-reset)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/Email"
                type:
                  type: string
                  enum:
                    - SIGNUP
                    - PASSWORD_RESET
      responses:
        "204":
          description: |-
            이메일 요청이 성공적으로 요청되면 응답 바디 없이 204만 반환합니다.
        "409":
          description: |-
            - `EMAIL_DUPLICATE`: 가입된 이메일이 있는 경우
            - `EMAIL_VERIFICATION_TYPE_NOT_SUPPORTED`: 지원하지 않는 인증 타입
        "400":
          description: |-
            - `USER_NOT_FOUND`: 사용자를 찾을 수 없는 경우
            - `INVALID_PARAMETER`: type 값이 지원하지 않는 값인 경우
  /auth/email-verification/verify-code:
    post:
      tags:
        - auth
      operationId: verifyEmailCode
      summary: "이메일 인증 코드 검증"
      description: |-
        이메일 인증 코드 검증을 수행합니다.

        ## Request Body
        - email: 인증을 요청한 이메일 주소
        - code: 검증할 인증 코드
        - type: 인증 타입 (signup, password-reset)

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/Email"
                code:
                  type: string
                  description: 인증 코드
                type:
                  type: string
                  enum:
                    - SIGNUP
                    - PASSWORD_RESET
      responses:
        "204":
          description: |-
            - 이메일 요청이 성공적으로 요청되면 응답 바디 없이 204만 반환합니다.

        "400":
          description: |-
            - `EMAIL_VERIFICATION_CODE_MISMATCH`: 이메일 인증 코드가 일치하지 않는 경우
            - `EMAIL_VERIFICATION_CODE_EXPIRED`: 이메일 인증 코드가 만료된 경우

  /auth/email-verification/resend:
    post:
      tags:
        - auth
      operationId: resendEmailVerification
      summary: "이메일 인증 코드 재전송"
      description: |-
        이메일 인증 코드 재전송을 수행합니다.

        ## Request Body
        - email: 인증을 요청한 이메일 주소
        - type: 인증 타입 (signup, password-reset)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/Email"
                type:
                  type: string
                  enum:
                    - SIGNUP
                    - PASSWORD_RESET
      responses:
        "204":
          description: |-
            - 이메일 요청이 성공적으로 요청되면 응답 바디 없이 204만 반환합니다.

        "429":
          description: |-
            - `TOO_MANY_REQUESTS`: 60초 이내에 요청했을 경우
  /auth/withdrawal:
    delete:
      tags:
        - auth
      operationId: withdraw
      summary: "회원 탈퇴"
      description: |-
        현재 로그인한 사용자의 계정을 삭제합니다.
      security:
        - BearerAuth: []
      responses:
        "204":
          description: |-
            회원 탈퇴가 성공적으로 처리되었습니다. 응답 바디 없이 204만 반환합니다.
        "400":
          description: |-
            - `USER_NOT_FOUND`: 사용자를 찾을 수 없거나 이미 삭제된 계정
        "401":
          description: |-
            - `INVALID_TOKEN`: 유효하지 않은 토큰
        "500":
          $ref: "#/components/responses/InternalServerErrorResponseSpec"
  /auth/token/refresh:
    post:
      tags:
        - auth
      operationId: refreshToken
      summary: "인증 토큰 갱신"
      description: |-
        리프레시 토큰을 사용하여 새로운 액세스 토큰과 리프레시 토큰을 발급받습니다.

        ## req payload
        - 요청 바디에 리프레시 토큰을 포함해야 합니다

        ## 보안 정책
        - 리프레시 토큰 사용 시 기존 리프레시 토큰은 자동으로 폐기됩니다
        - 새로운 액세스 토큰과 리프레시 토큰이 발급됩니다
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRefreshRequest"
      responses:
        "200":
          $ref: "#/components/responses/TokenRefreshResponseSpec"
        "400":
          description: |-
            토큰 갱신 요청 실패

            **에러 케이스:**
            - `REFRESH_TOKEN_NOT_FOUND`: 리프레시 토큰을 찾을 수 없습니다
            - `INVALID_TOKEN`: 유효하지 않은 토큰 형식입니다
            - `INVALID_REQUEST`: 요청 형식이 올바르지 않습니다 (refreshToken 필드 누락)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRefreshErrorResponse"
              examples:
                refresh_token_not_found:
                  summary: 리프레시 토큰을 찾을 수 없음
                  value:
                    errorCode: "REFRESH_TOKEN_NOT_FOUND"
                    message: "리프레시 토큰을 찾을 수 없습니다."
                invalid_token:
                  summary: 유효하지 않은 토큰 형식
                  value:
                    errorCode: "INVALID_TOKEN"
                    message: "유효하지 않은 토큰입니다."
                invalid_request:
                  summary: 잘못된 요청 형식
                  value:
                    errorCode: "INVALID_REQUEST"
                    message: "요청값이 올바르지 않습니다."
                    errors:
                      - field: "refreshToken"
                        errorCode: "REQUIRED"
                        message: "리프레시 토큰은 필수입니다."
        "401":
          description: |-
            인증 실패 - 토큰이 만료되거나 폐기된 경우

            **에러 케이스:**
            - `REFRESH_TOKEN_EXPIRED`: 리프레시 토큰이 만료되었습니다
            - `REFRESH_TOKEN_REVOKED`: 리프레시 토큰이 폐기되었습니다
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenRefreshErrorResponse"
              examples:
                refresh_token_expired:
                  summary: 리프레시 토큰 만료
                  value:
                    errorCode: "REFRESH_TOKEN_EXPIRED"
                    message: "리프레시 토큰이 만료되었습니다."
                refresh_token_revoked:
                  summary: 리프레시 토큰 폐기
                  value:
                    errorCode: "REFRESH_TOKEN_REVOKED"
                    message: "리프레시 토큰이 폐기되었습니다."
        "500":
          $ref: "#/components/responses/InternalServerErrorResponseSpec"
  /users/me:
    get:
      tags:
        - user
      operationId: getMe
      summary: "내 정보 조회"
      description: |-
          유효한 액세스토큰으로 조회한 유저의 프로필 정보 조회
      security:
          - BearerAuth: []
      responses:
        "200":
          $ref: "#/components/responses/GetMeResponseSpec"
        "401":
          description: 인증 실패
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/BaseProblemDetails"
    patch:
      tags:
        - user
      operationId: updateMe
      summary: "내 정보 수정"
      description: |-
        유저의 프로필 정보를 수정합니다.
        - 닉네임, 캐릭터 컴포넌트, 홈 타입, 알림 허용 여부, 마케팅 동의 여부를 수정할 수 있습니다.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserProfileRequest"
      responses:
        "200":
          $ref: "#/components/responses/GetMeResponseSpec"
        "400":
          $ref: "#/components/responses/BadRequestResponseSpec"
        "401":
          description: 인증 실패
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/BaseProblemDetails"
  /profile/assets:
    get:
      tags:
        - profile
      operationId: getAssets
      summary: "프로필 에셋 조회"
      description: |-
        캐릭터 커스터마이징에 사용할 수 있는 모든 프로필 에셋을 조회합니다.

        ETag를 지원하여 클라이언트 캐싱을 최적화합니다.
      parameters:
        - name: If-None-Match
          in: header
          description: 클라이언트가 보유한 ETag 값 (캐싱 목적)
          required: false
          schema:
            type: string
          example: "profile-v1234567890"
      responses:
        "200":
          description: |-
            프로필 에셋 목록이 성공적으로 반환됩니다.
          headers:
            ETag:
              description: 응답 데이터의 ETag 값
              schema:
                type: string
            Cache-Control:
              description: 캐시 제어 헤더
              schema:
                type: string
                example: "max-age=86400, must-revalidate"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProfileAssetResponse"
        "304":
          description: |-
            Not Modified - 클라이언트가 보유한 데이터가 최신 상태입니다.
          headers:
            ETag:
              description: 응답 데이터의 ETag 값
              schema:
                type: string
            Cache-Control:
              description: 캐시 제어 헤더
              schema:
                type: string
        "500":
          $ref: "#/components/responses/InternalServerErrorResponseSpec"
  /notifications:
    get:
      tags:
        - notification
      operationId: getNotifications
      summary: "알림 목록 조회"
      description: |-
        사용자의 알림 목록을 조회합니다.

        - 알림 목록은 생성일 기준 최신순으로 정렬되어 반환됩니다.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: 알림 목록 조회 성공
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Notification"
  /notifications/mark-as-read:
    post:
      tags:
        - notification
      operationId: markAsRead
      summary: "알림 읽음 처리"
      description: |-
        여러 알림을 읽음 상태로 변경합니다.

        ## Request Body
        - `notificationIds`: 읽음 처리할 알림 ID 목록

        ## 정책
        - 읽음 처리가 되어 있지 않은 알림: 읽음 처리 후 성공 반환
        - 이미 읽음 처리된 알림: 중복 요청이지만 성공으로 취급

      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MarkAsReadRequest"
      responses:
        "200":
          description: 읽음 처리 완료
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MarkAsReadResponse"
        "400":
          description: 잘못된 요청 (빈 목록 등)
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/BaseProblemDetails"
  /notifications/unread-count:
    get:
      tags:
        - notification
      operationId: getUnreadCount
      summary: "읽지 않은 알림 수 조회"
      description: |-
        사용자의 읽지 않은 알림 개수를 조회합니다.

        [앱 배지 표시](https://www.figma.com/design/kNH8Vpp8O5H0CimMd2NZPk/%EB%94%94%EC%9E%90%EC%9D%B8?node-id=1328-6431&t=9ASbx2Jo9hrFUDRR-4)나
        알림 센터의 읽지 않은 알림 수를 표시할 때 사용합니다.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: 읽지 않은 알림 수 조회 성공
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnreadCountResponse"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    BaseProblemDetails:
      type: object
      required:
        - type
        - title
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        detail:
          type: string
    BaseUser:
      type: object
      properties:
        providerId:
          type: string
          description: 소셜로그인을 하면서 provider 로부터 받은 id 를 저장합니다.
          example: "1238923918302390"
        provider:
          $ref: "#/components/schemas/Provider"
        email:
          $ref: "#/components/schemas/Email"
        password:
          type: string
          example: abcdefg12345
          description: |-
            이메일 계정인 경우에만 사용합니다. 소셜로그인의 경우 `null`

            클라이언트 인증이 된 상태로 넘어와야 합니다 (AES-256)
    Gender:
      type: string
      enum:
        - M
        - F
    SignUpRequest:
      required:
        - provider
        - email
        - termsAgreements
      allOf:
        - $ref: "#/components/schemas/BaseUser"
        - type: object
          properties:
            providerAccessToken:
              description: |-
                소셜로그인 제공자로부터 받은 access token 입니다. (KAKAO 등)
              $ref: "#/components/schemas/JwtToken"
            termsAgreements:
              description: |-
                유저의 약관 동의 정보
                약관 동의는 `termsAgreements` 에서 `id` 와 `isAgree` 를 통해 약관 동의 여부를 나타냅니다.
              type: array
              items:
                type: object
                required:
                  - id
                  - isAgree
                properties:
                  id:
                    type: integer
                    format: int64
                    description: 약관 아이디
                  isAgree:
                    type: boolean
                    description: 약관 동의 여부
    ProfileAsset:
      type: object
      properties:
        id:
          type: string
          description: 프로필 컴포넌트의 키
          example: "FACE_TYPE_1"
        uri:
          type: string
          format: uri
          description: 프로필 컴포넌트의 이미지 URI
          example: "https://example.com/face_type_1.svg"
    Character:
      type: object
      properties:
        face:
          $ref: "#/components/schemas/ProfileAsset"
        hand:
          $ref: "#/components/schemas/ProfileAsset"
        skinColor:
          type: string
          description: 피부색
          example: #FFDBAC
        bang:
          $ref: "#/components/schemas/ProfileAsset"
        backHair:
          $ref: "#/components/schemas/ProfileAsset"
        eyes:
          $ref: "#/components/schemas/ProfileAsset"
        mouth:
          $ref: "#/components/schemas/ProfileAsset"
        home:
          $ref: "#/components/schemas/ProfileAsset"
    UpdateProfileCharacter:
      type: object
      properties:
        face:
          type: string
          example: "FACE_TYPE_1"
        hand:
          type: string
          example: "HAND_TYPE_1"
        skinColor:
          type: string
          description: 피부색
          example: "#FFDBAC"
        bang:
          type: string
          example: "BANG_TYPE_1"
        backHair:
          type: string
          example: "BACK_HAIR_TYPE_1"
        eyes:
          type: string
          example: "EYES_TYPE_1"
        mouth:
          type: string
          example: "MOUTH_TYPE_1"
        home:
          type: string
          example: "HOME_TYPE_1"
    UpdateUserProfileRequest:
      type: object
      properties:
        nickname:
          type: string
          description: 유저의 닉네임
          example: "홍길동"
        character:
          $ref: "#/components/schemas/UpdateProfileCharacter"
        isNotificationAllowed:
          type: boolean
          description: 유저가 알림을 허용하는지 여부
          example: true
        isMarketingAgreed:
          type: boolean
          description: 유저가 마케팅 수신에 동의하는지 여부
          example: true
    UserProfileResponse:
      type: object
      required:
        - id
        - nickname
        - email
        - characterComponents
        - isNotificationAllowed
        - isMarketingAgreed
      properties:
        id:
          type: integer
          format: int64
          description: 유저 아이디
          example: 15423
        email:
          $ref: "#/components/schemas/Email"
        nickname:
          type: string
          description: 유저의 닉네임
          example: "홍길동"
        character:
          $ref: "#/components/schemas/Character"
        isNotificationAllowed:
          type: boolean
          description: |-
              유저가 알림을 허용하는지 여부
          example: true
        isMarketingAgreed:
          type: boolean
          description: |-
              유저가 마케팅 수신에 동의하는지 여부
          example: true
    CommonSignResponseBody:
      type: object
      required:
        - accessToken
        - refreshToken
      properties:
        accessToken:
          $ref: "#/components/schemas/JwtToken"
        refreshToken:
          $ref: "#/components/schemas/JwtToken"
    #    SignUpSuccessResponseBody:
    #      type: object
    #      properties:
    #        accessToken:
    #          $ref: "#/components/schemas/JwtToken"
    #        refreshToken:
    #          $ref: "#/components/schemas/JwtToken"
    #    SignInResponse:
    #      type: object
    #      properties:
    #        accessToken:
    #          $ref: "#/components/schemas/JwtToken"
    #        refreshToken:
    #          $ref: "#/components/schemas/JwtToken"
    SignInRequest:
      type: object
      required:
        - provider
        - email
      properties:
        providerId:
          type: string
          description: |-
            인증 제공자로부터 제공받은 유저의 고유값을 입력합니다.

            `EMAIL`의 경우에는 `null` 처리합니다.
          example: "1238923918302390"
        provider:
          $ref: "#/components/schemas/Provider"
        email:
          $ref: "#/components/schemas/Email"
        password:
          type: string
          description: |-
            이메일 계정인 경우에만 사용합니다. 소셜로그인의 경우 `null`
        providerAccessToken:
          description: |-
            소셜로그인 제공자로부터 받은 access token 입니다. (KAKAO 등)
          $ref: "#/components/schemas/JwtToken"
    GetMeBase:
      type: object
    Address:
      type: object
      properties:
        postcode:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        detailAddress:
          type: string
          nullable: true
    JwtToken:
      type: string
      format: jwt
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjEsInJvbGVOYW1lIjoidXNlciIsImlhdCI6MTYyNDk2MTgzNSwiZXhwIjoxNjI1MzIxODM1LCJpc3MiOiJjaGFib3RwbGF0Zm9ybV9pc3MhIn0.NdBnF65ukwxuLtpPriDXQ--2Tn--7WAPnyz29T9_6s4
    Provider:
      type: string
      description: 인증 제공자
      enum:
        - KAKAO
        - BOS
      example: KAKAO
    Email:
      type: string
      format: email
      description: email 주소
      example: abc@abc.com
    PhoneNumber:
      type: string
      pattern: '^010-\d{4}-\d{4}$'
      description: 대한민국 휴대폰 번호 형식, 010-XXXX-XXXX
      example: "010-1234-5678"
    AlimAgree:
      type: object
      properties:
        sms_yn:
          type: string
        app_yn:
          type: string
        tm_yn:
          type: string
        email_yn:
          type: string
    AlimAgreeRequest:
      required:
        - sms_yn
        - app_yn
        - tm_yn
        - email_yn
      allOf:
        - $ref: "#/components/schemas/AlimAgree"
    AlimAgreeResponse:
      properties:
        data:
          allOf:
            - $ref: "#/components/schemas/AlimAgree"
            - properties:
                marketingAgreeUpdatedDate:
                  type: string
                  format: date-time
    Agreement:
      type: object
      required:
        - id
        - name
        - contentUri
        - isRequired
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: int64
          description: 아이디
        name:
          type: string
          description: 제목
          example: 이용약관
        contentUri:
          type: string
          format: uri
          description: 약관 notion link
        isRequired:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    AccountAgreement:
      type: object
      required:
        - agreementId
        - agreementName
        - agreedAt
      properties:
        agreementId:
          type: integer
          format: int64
          description: 약관 아이디
        agreementName:
          type: string
          description: 약관명
          example: 이용약관
        agreedAt:
          type: string
          nullable: true
          format: date-time
          description: |-
            약관 동의 일시, `null`인경우 동의하지 않은 상태
          example: "2025-02-01T00:00:00Z"
    AccountAgreementItem:
      type: object
      required:
        - agreementId
        - isAgree
      properties:
        agreementId:
          type: integer
          format: int64
          description: 약관 아이디
        isAgree:
          type: boolean
          description: 동의 여부
    BosAuthDetail:
      type: object
      required:
        - isEmailVerified
        - email
      properties:
        isEmailVerified:
          type: boolean
        email:
          $ref: "#/components/schemas/Email"
    KakaoAuthDetail:
      type: object
      required:
        - providerId
        - email
      properties:
        providerId:
          type: string
        email:
          $ref: "#/components/schemas/Email"
    AppleAuthDetail:
      type: object
      description: |-
        애플의 경우 사용자의 보안 조치에 따라 사용자의 원 이메일을 반환하지 않고 릴레에 이메일을 반환할 수 있습니다.
      required:
        - providerId
        - relayEmail
      properties:
        providerId:
          type: string
        relayEmail:
          $ref: "#/components/schemas/Email"
    ProfileAssetResponse:
      type: object
      required:
        - home
        - face
        - hand
        - bang
        - backHair
        - eyes
        - mouth
        - skinColor
      properties:
        home:
          type: array
          description: 홈 타입 에셋 목록
          items:
            type: object
            properties:
              key:
                type: string
                description: 에셋의 고유 키
                example: "HOME_TYPE_1"
              uri:
                type: string
                format: uri
                description: 에셋 이미지의 URI
                example: "https://example.com/home_type_1.svg"
        face:
          type: array
          description: 얼굴 모양 에셋 목록
          items:
            type: object
            properties:
              key:
                type: string
                description: 에셋의 고유 키
                example: "FACE_TYPE_1"
              uri:
                type: string
                format: uri
                description: 에셋 이미지의 URI
                example: "https://example.com/face_type_1.svg"
        hand:
          type: array
          description: 손 에셋 목록
          items:
            type: object
            properties:
              key:
                type: string
                description: 에셋의 고유 키
                example: "HAND_TYPE_1"
              uri:
                type: string
                format: uri
                description: 에셋 이미지의 URI
                example: "https://example.com/hand_type_1.svg"
        bang:
          type: array
          description: 앞머리 에셋 목록
          items:
            type: object
            properties:
              key:
                type: string
                description: 에셋의 고유 키
                example: "BANG_TYPE_1"
              uri:
                type: string
                format: uri
                description: 에셋 이미지의 URI
                example: "https://example.com/bang_type_1.svg"
        backHair:
          type: array
          description: 뒷머리 에셋 목록
          items:
            type: object
            properties:
              key:
                type: string
                description: 에셋의 고유 키
                example: "BACK_HAIR_TYPE_1"
              uri:
                type: string
                format: uri
                description: 에셋 이미지의 URI
                example: "https://example.com/back_hair_type_1.svg"
        eyes:
          type: array
          description: 눈 에셋 목록
          items:
            type: object
            properties:
              key:
                type: string
                description: 에셋의 고유 키
                example: "EYES_TYPE_1"
              uri:
                type: string
                format: uri
                description: 에셋 이미지의 URI
                example: "https://example.com/eyes_type_1.svg"
        mouth:
          type: array
          description: 입 에셋 목록
          items:
            type: object
            properties:
              key:
                type: string
                description: 에셋의 고유 키
                example: "MOUTH_TYPE_1"
              uri:
                type: string
                format: uri
                description: 에셋 이미지의 URI
                example: "https://example.com/mouth_type_1.svg"
        skinColor:
          type: array
          description: 스킨 컬러 목록
          items:
            type: string
            description: HEX 컬러 코드
            example: "#FEEFE7"
    Asset:
      type: object
      required:
        - key
        - uri
      properties:
        key:
          type: string
          description: 에셋의 고유 키
          example: "FACE_TYPE_1"
        uri:
          type: string
          format: uri
          description: 에셋 이미지의 URI
          example: "https://example.com/face_type_1.svg"
    NotificationCategory:
      type: string
      enum:
        - REPAYMENT_DUE
        - REPAYMENT_COMPLETED
        - RECEIVABLE_DUE
        - RECEIVABLE_COMPLETED
        - GENERAL
      description: |-
        알림 카테고리
        - REPAYMENT_DUE: 돈 갚는날
        - REPAYMENT_COMPLETED: 돈 갚기 완료
        - RECEIVABLE_DUE: 돈 받는날
        - RECEIVABLE_COMPLETED: 돈 받기 완료
        - GENERAL: 일반
      example: REPAYMENT_DUE
    Notification:
      type: object
      required:
        - id
        - title
        - content
        - category
        - isRead
        - createdAt
      properties:
        id:
          type: integer
          format: int64
          description: 알림 ID
          example: 123
        title:
          type: string
          description: 알림 제목
          example: "돈 갚는 날 D-2"
        content:
          type: string
          description: 알림 내용
          example: "홍길동님, 김철수님께 100000원을 갚을 날이 2일 남았어요! 미리 준비해 주세요."
        category:
          $ref: "#/components/schemas/NotificationCategory"
        deepLink:
          type: string
          nullable: true
          description: 알림 클릭 시 이동할 경로
          example: "/transactions/123/repay"
        readAt:
          type: string
          format: date-time
          nullable: true
          description: 읽음 처리 시각, null인 경우 알림을 읽은것으로 취급합니다.
        createdAt:
          type: string
          format: date-time
          description: 알림 생성 시각
          example: "2025-01-15T10:30:00Z"
    MarkAsReadRequest:
      type: object
      required:
        - notificationIds
      properties:
        notificationIds:
          type: array
          description: 읽음 처리할 알림 ID 목록
          items:
            type: integer
            format: int64
          example: [123, 124, 125]
          minItems: 1
    MarkAsReadResponse:
      type: object
      required:
        - processedIds
      properties:
        processedIds:
          type: array
          description: |-
            읽음 처리된 알림 ID 목록
            - 읽음 처리가 되어 있지 않은 알림이 읽음 처리에 성공한 경우: 성공
            - 읽음 처리가 되어 있는데 중복되어 요청된 경우: 성공으로 취급
          items:
            type: integer
            format: int64
          example: [123, 124, 125]
    UnreadCountResponse:
      type: object
      required:
        - unreadCount
      properties:
        unreadCount:
          type: integer
          format: int64
          description: 읽지 않은 알림 수
          example: 5
    TokenRefreshRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: 리프레시 토큰
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    TokenRefreshErrorResponse:
      type: object
      required:
        - errorCode
        - message
      properties:
        errorCode:
          type: string
          description: 에러 코드
          enum:
            - REFRESH_TOKEN_NOT_FOUND
            - REFRESH_TOKEN_EXPIRED
            - REFRESH_TOKEN_REVOKED
            - INVALID_TOKEN
            - INVALID_REQUEST
          example: "REFRESH_TOKEN_EXPIRED"
        message:
          type: string
          description: 에러 메시지
          example: "리프레시 토큰이 만료되었습니다."
        errors:
          type: array
          description: 필드별 검증 오류 (INVALID_REQUEST 시에만 포함)
          items:
            type: object
            properties:
              field:
                type: string
                description: 오류가 발생한 필드명
                example: "refreshToken"
              errorCode:
                type: string
                description: 필드별 에러 코드
                example: "REQUIRED"
              message:
                type: string
                description: 필드별 에러 메시지
                example: "리프레시 토큰은 필수입니다."

  requestBodies:
    SignUpRequestSpec:
      required: true
      description: |-
        회원가입 요청 페이로드

        - providerAccessToken: 소셜로그인 제공자로부터 받은 access token 입니다. (KAKAO 등)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignUpRequest"
    SignInRequestSpec:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignInRequest"
  responses:
    NotFoundResponseSpec:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/BaseProblemDetails"
    BadRequestResponseSpec:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/BaseProblemDetails"
    ConflictResponseSpec:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/BaseProblemDetails"
    InternalServerErrorResponseSpec:
      description: 내부 오류가 생겼습니다. 해당 상황 발생 시, 관리자에게 이야기해주세요.
      content:
        application/json:
          schema:
            properties:
              statusCode:
                type: number
                example: 500
              message:
                type: string
                example: Internal Server Error
    SignUpCreatedResponseSpec:
      description: |-
        회원가입 완료시 accessToken, refreshToken 발급
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CommonSignResponseBody"
    SignInSuccessResponseSpec:
      description: 로그인 성공
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CommonSignResponseBody"
    GetMeResponseSpec:
      description: |-
        유효한 액세스토큰으로 조회한 유저 프로필 정보 조회
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserProfileResponse"
    TokenRefreshResponseSpec:
      description: |-
        토큰 갱신 성공

        새로운 액세스 토큰과 리프레시 토큰이 발급됩니다.
        기존 리프레시 토큰은 자동으로 폐기됩니다.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CommonSignResponseBody"
