openapi: 3.1.0
info:
  title: BOS API documentation
  description: |
    내꿈은건물주  API 문서

  version: 0.0.1-SNAPSHOT
  contact: { }
tags:
  - name: auth
paths:
  /me:
    get:
      tags:
        - auth
      operationId: getMe
      summary: 유저 정보 조회
      description: |- 
        헤더의 토큰을 검증하여 인증된 유저인지 확인하고 사용자의 정보를 나타냅니다.

      responses:
        '200':
          $ref: "#/components/responses/GetMeResponseSpec"
        '401':
          description: |- 
            인증되지 않은 유저
            
            ### 에러 코드 (wip) 
            - `UNAUTHORIZED`: 인증되지 않은 유저입니다. (토큰이 유효하지 않거나 만료된 경우) -> 로그인 or 리프레시 토큰으로 토큰 갱신 
            - `NOT_VERIFIED`: 이메일 인증이 되지 않은 유저 (인증 메일 재발송 로직 토큰으로 요청) -> 이매일 인증
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/JwtExceptionResponse"
  /auth/sign-in:
    post:
      operationId: signIn
      summary: 회원 로그인
      tags:
        - auth
      description: |-
        # 로그인
      requestBody:
        $ref: "#/components/requestBodies/SignInRequestSpec"
      responses:
        '201':
          $ref: "#/components/responses/SignInSuccessResponseSpec"
        '400':
          description: |-
            (WIP) 로그인 요청 실패
            
            에러 응답 정의하며 구체화 예정 
            
            에러 케이스 (확정 X)
            - 입력값 validation (Violations) - 로직 타지 않음 (입력값만 검증)
            - oauth 로그인의 경우 로그인 실패 케이스 (UnSignedUserError) -> 회원가입으로 리디렉션
            - 로그인 로직중 발생한 에러 (에러명 미정의) 

          content:
            application/json:
              schema:
                properties:
                  message:
                    type: object
        '500':
          description: 서버 오류
          content:
            application/json:
              schema:
                properties:
                  statusCode:
                    type: number
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
  /auth/sign-up:
    post:
      operationId: signUp
      summary: 회원 가입
      tags:
        - auth
      description: |-
        # 회원가입
      requestBody:
        $ref: "#/components/requestBodies/SignUpRequestSpec"
      responses:
        '201':
          $ref: "#/components/responses/SignUpCreatedResponseSpec"
        '400':
          description: |-
            (WIP) 로그인 요청 실패

            에러 응답 정의하며 구체화 예정 

            에러 케이스 (확정 X)
            - 입력값 validation (Violations) - 로직 타지 않음 (입력값만 검증)
            - 회원가입 로직중 발생한 에러 (에러명 미정의) 

          content:
            application/json:
              schema:
                properties:
                  message:
                    type: object
        '500':
          $ref: "#/components/responses/InternalServerErrorResponseSpec"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    BaseProblemDetails:
      type: object
      required:
        - type
        - title
      properties:
        type:
          type: string
          format: uri
        title:
          type: string
        detail:
          type: string
    BaseUser:
      type: object
      properties:
        providerId:
          type: string
          description: 소셜로그인을 하면서 provider 로부터 받은 id 를 저장합니다.
          example: '1238923918302390'
        provider:
          $ref: "#/components/schemas/Provider"
        email:
          $ref: "#/components/schemas/Email"
        password:
          type: string
          example: abcdefg12345
          description: |-
            이메일 계정인 경우에만 사용합니다. 소셜로그인의 경우 `null`
            
            클라이언트 인증이 된 상태로 넘어와야 합니다 (AES-256)

    Gender:
      type: string
      enum:
        - M
        - F
    SignUpRequest:
      required:
        - provider
        - email
        - termsAgreements
      allOf:
        - $ref: "#/components/schemas/BaseUser"
        - type: object
          properties:
            providerAccessToken:
              $ref: "#/components/schemas/JwtToken"
            termsAgreements:
              description: |-
                약관 동의 정보입니다.
                
                동의한 약관과 동의하지 않은 약관들에 대한 필드
              type: array
              items:
                type: object
                required:
                - termId
                - isAgree
                properties:
                  termId:
                      type: integer
                      format: int64
                  isAgree:
                      type: boolean
    MeCommonBody:
      type: object
      properties:
        email:
          $ref: "#/components/schemas/Email"
        providerId:
          type: string
          description: 소셜로그인을 하면서 provider 로부터 받은 id 를 저장합니다. 소셜 로그인 아니면 `null`
          example: '1238923918302390'
    MeResponseBase:
      type: object
      required:
        - provider
      properties:
        provider:
          $ref: "#/components/schemas/Provider"
      discriminator:
        propertyName: provider
        mapping:
          BOS: "#/components/schemas/BosAuthMeResponse"
          KAKAO: "#/components/schemas/KakaoAuthMeResponse"
          APPLE: "#/components/schemas/AppleAuthMeResponse"
    BosAuthMeResponse:
      allOf:
        - $ref: "#/components/schemas/MeResponseBase"
        - $ref: "#/components/schemas/MeCommonBody"
        - type: object
          properties:
            authDetail:
              $ref: "#/components/schemas/BosAuthDetail"
    KakaoAuthMeResponse:
      allOf:
        - $ref: "#/components/schemas/MeResponseBase"
        - $ref: "#/components/schemas/MeCommonBody"
        - type: object
          properties:
            authDetail:
              $ref: "#/components/schemas/KakaoAuthDetail"
    AppleAuthMeResponse:
      allOf:
        - $ref: "#/components/schemas/MeResponseBase"
        - $ref: "#/components/schemas/MeCommonBody"
        - type: object
          properties:
            authDetail:
              $ref: "#/components/schemas/AppleAuthDetail"
    ResetPasswordRequest:
      type: object
      required:
        - validateCode
        - password
      properties:
        validateCode:
          type: string
        password:
          type: string
    DeleteAccountRequest:
      type: object
      properties:
        reasonId:
          type: integer
          example: 1
        detailReasonId:
          type: integer
          example: 1
        detailReason:
          type: string
          example: 서비스 미사용으로 인한 탈퇴
    CheckResetPasswordLinkExpiredRequest:
      type: object
      required:
        - validateCode
      properties:
        validateCode:
          type: string
    CommonSuccessResponse:
      type: object
      properties:
        statusCode:
          type: integer
          default: 200
          example: 200
        message:
          type: string
          default: "Success"
          example: Success
    CommonCreatedResponse:
      type: object
      properties:
        statusCode:
          type: integer
          default: 201
          example: 201
        message:
          type: string
          default: Created
          example: Created
    CommonBadRequestResponse:
      type: object
      properties:
        statusCode:
          type: integer
          example: 400
    JwtExceptionResponse:
      allOf:
        - $ref: "#/components/schemas/CommonBadRequestResponse"
        - type: object
          properties:
            timestamp:
              type: string
              format: date-time
            path:
              type: string
            message:
              type: string
    CommonAuthResponse:
      type: object
      required:
        - accountId
        - accessToken
        - refreshToken
      properties:
        accessToken:
          $ref: "#/components/schemas/JwtToken"
        refreshToken:
          $ref: "#/components/schemas/JwtToken"
        alreadySetDrivingKeywords:
          type: boolean
          example: false
          default: false
        accountId:
          type: integer
          format: int64
          example: 1
    CommonSignResponseBody:
      type: object
      required:
        - accessToken
        - refreshToken
      properties:
        accessToken:
          $ref: "#/components/schemas/JwtToken"
        refreshToken:
          $ref: "#/components/schemas/JwtToken"
#    SignUpSuccessResponseBody:
#      type: object
#      properties:
#        accessToken:
#          $ref: "#/components/schemas/JwtToken"
#        refreshToken:
#          $ref: "#/components/schemas/JwtToken"
#    SignInResponse:
#      type: object
#      properties:
#        accessToken:
#          $ref: "#/components/schemas/JwtToken"
#        refreshToken:
#          $ref: "#/components/schemas/JwtToken"
    SignUpSuccessResponse:
      allOf:
        - $ref: "#/components/schemas/CommonSuccessResponse"
        - type: object
          properties:
            data:
              $ref: "#/components/schemas/CommonAuthResponse"
    SignInRequest:
      type: object
      required:
        - provider
        - email
      properties:
        providerId:
          type: string
          description: |-
            인증 제공자로부터 제공받은 유저의 고유값을 입력합니다.
            
            `EMAIL`의 경우에는 `null` 처리합니다.
          example: '1238923918302390'
        provider:
          $ref: "#/components/schemas/Provider"
        email:
          $ref: "#/components/schemas/Email"
        password:
          type: string
          description: |-
            이메일 계정인 경우에만 사용합니다. 소셜로그인의 경우 `null`
        providerAccessToken:
          $ref: "#/components/schemas/JwtToken"
    GetMeBase:
      type: object
    Address:
      type: object
      properties:
        postcode:
          type: string
          nullable: true
        city:
          type: string
          nullable: true
        address:
          type: string
          nullable: true
        detailAddress:
          type: string
          nullable: true
    JwtToken:
      type: string
      format: jwt
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhY2NvdW50SWQiOjEsInJvbGVOYW1lIjoidXNlciIsImlhdCI6MTYyNDk2MTgzNSwiZXhwIjoxNjI1MzIxODM1LCJpc3MiOiJjaGFib3RwbGF0Zm9ybV9pc3MhIn0.NdBnF65ukwxuLtpPriDXQ--2Tn--7WAPnyz29T9_6s4
    Provider:
      type: string
      description: 인증 제공자
      enum:
        - KAKAO
        - BOS
        - APPLE
      example: KAKAO
    Email:
      type: string
      format: email
      description: email 주소
      example: abc@abc.com
    PhoneNumber:
      type: string
      pattern: '^010-\d{4}-\d{4}$'
      description: 대한민국 휴대폰 번호 형식, 010-XXXX-XXXX
      example: '010-1234-5678'
    AlimAgree:
      type: object
      properties:
        sms_yn:
          type: string
        app_yn:
          type: string
        tm_yn:
          type: string
        email_yn:
          type: string
    AlimAgreeRequest:
      required:
        - sms_yn
        - app_yn
        - tm_yn
        - email_yn
      allOf:
        - $ref: "#/components/schemas/AlimAgree"
    AlimAgreeResponse:
      properties:
        data:
          allOf:
            - $ref: "#/components/schemas/AlimAgree"
            - properties:
                marketingAgreeUpdatedDate:
                  type: string
                  format: date-time
    Agreement:
      type: object
      required:
        - id
        - name
        - contentUri
        - isRequired
        - createdAt
        - updatedAt
      properties:
        id:
          type: integer
          format: int64
          description: 아이디
        name:
          type: string
          description: 제목
          example: 이용약관
        contentUri:
          type: string
          format: uri
          description: 약관 notion link
        isRequired:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    AccountAgreement:
      type: object
      required:
        - agreementId
        - agreementName
        - agreedAt
      properties:
        agreementId:
          type: integer
          format: int64
          description: 약관 아이디
        agreementName:
          type: string
          description: 약관명
          example: 이용약관
        agreedAt:
          type: string
          nullable: true
          format: date-time
          description: |-
            약관 동의 일시, `null`인경우 동의하지 않은 상태
          example: "2025-02-01T00:00:00Z"
    AccountAgreementItem:
      type: object
      required:
        - agreementId
        - isAgree
      properties:
        agreementId:
          type: integer
          format: int64
          description: 약관 아이디
        isAgree:
          type: boolean
          description: 동의 여부
    BosAuthDetail:
      type: object
      required:
        - isEmailVerified
        - email
      properties:
        isEmailVerified:
          type: boolean
        email:
          $ref: "#/components/schemas/Email"
    KakaoAuthDetail:
      type: object
      required:
        - providerId
        - email
      properties:
        providerId:
          type: string
        email:
          $ref: "#/components/schemas/Email"
    AppleAuthDetail:
      type: object
      description: |-
        애플의 경우 사용자의 보안 조치에 따라 사용자의 원 이메일을 반환하지 않고 릴레에 이메일을 반환할 수 있습니다.
      required:
        - providerId
        - relayEmail
      properties:
        providerId:
          type: string
        relayEmail:
          $ref: "#/components/schemas/Email"

  requestBodies:
    SignUpRequestSpec:
      required: true
      description: |-
        회원가입 요청 페이로드 
        
        - providerAccessToken: 소셜로그인 제공자로부터 받은 access token 입니다. (KAKAO 등)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignUpRequest"
    SignInRequestSpec:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SignInRequest"
    AlimAgreeRequestSpec:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AlimAgreeRequest"
    CreateAccountAgreementsRequestSpec:
      description: 약관 동의 요청
      required: true
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AccountAgreementItem"
  responses:
    NotFoundResponseSpec:
      description: Not Found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BaseProblemDetails'
    BadRequestResponseSpec:
      description: Bad Request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BaseProblemDetails'
    ConflictResponseSpec:
      description: Conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/BaseProblemDetails'
    InternalServerErrorResponseSpec:
      description: 내부 오류가 생겼습니다. 해당 상황 발생 시, 관리자에게 이야기해주세요.
      content:
        application/json:
          schema:
            properties:
              statusCode:
                type: number
                example: 500
              message:
                type: string
                example: Internal Server Error
    SignUpSuccessResponseSpec:
      description: 가입이 되어있던 회원이기에 로그인 처리를 하였습니다. `accessToken` 과 `refreshToken`, 그리고 `accountId` 를 발급합니다.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/SignUpSuccessResponse'
    SignUpCreatedResponseSpec:
      description: |- 
        회원가입 완료시 accessToken, refreshToken 발급
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonSignResponseBody'
    SignInSuccessResponseSpec:
      description: 로그인 성공
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CommonSignResponseBody'
    GetMeResponseSpec:
      description: |-
        액세스 토큰으로 조회한 유저의 기본 정보들

        authDetail은 provider가 무엇이냐에 따라 스펙이 달라질 수 있습니다.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MeResponseBase"
#    GetMeResponseSpec:
#      description: |-
#        액세스 토큰으로 조회한 유저의 기본 정보들
#
#        authDetail은 provider가 무엇이냐에 따라 스펙이 달라질 수 있습니다.
#      content:
#        application/json:
#          schema:
#            required:
#              - id
#              - email
#              - provider
#              - authDetail
#              - role
#            type: object
#            properties:
#              id:
#                type: integer
#                format: int64
#                description: 유저 아이디
#              email:
#                $ref: "#/components/schemas/Email"
#              providerId:
#                type: string
#                description: 소셜로그인을 하면서 provider 로부터 받은 id 를 저장합니다. 소셜 로그인 아니면 `null`
#                example: '1238923918302390'
#              provider:
#                $ref: "#/components/schemas/Provider"
#              authDetail:
#                oneOf:
#                  - $ref: '#/components/schemas/BosAuthDetail'
#                  - $ref: '#/components/schemas/KakaoAuthDetail'
#                  - $ref: '#/components/schemas/AppleAuthDetail'
#            discriminator:
#              propertyName: provider
#              mapping:
#                BOS: '#/components/schemas/BosAuthDetail'
#                KAKAO: '#/components/schemas/KakaoAuthDetail'
#                APPLE: '#/components/schemas/AppleAuthDetail'
#
#              role:
#                type: string
#                description: 유저의 역할 (USER, ADMIN 등)
